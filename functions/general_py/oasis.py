class oasis:
    def __init__(self, nb_of_couplings = 1, coupled_execs = ["echam", "fesom"], runtime = 1, debug_level=1):
        self.namcouple = ["# This namcouple was automatically generated by the esm-tools (Python)"]
        self.namcouple += [" $NFIELDS", "            " + str(nb_of_couplings), " $END"]
        exec_entry = ""
        for exe in coupled_execs:
            exec_entry = exec_entry + " " + exe
        exec_entry = str(len(coupled_execs)) + exec_entry
        self.namcouple += [" $NBMODEL", "            " + str(exec_entry)," $END"]
        self.namcouple += [" $RUNTIME", "           " + str(runtime), " $END"]
        self.namcouple += [" $NLOGPRT", "           " + str(debug_level), " $END"]
        self.namcouple += [" $STRINGS"]
        self.namcouple += ["###############################################################################"]
        self.namcouple += ["###############################################################################"]
        self.next_coupling=1


    def add_coupling(self, lefts, lgrid, rights, rgrid, direction, transformation, restart_file, time_step, lresume):
        self.namcouple += ["#"]

        nb = self.next_coupling

        left = sep = ""
        for lefty in lefts:

            restart_out_file = lefty + "_"

            left += sep + lefty
            self.next_coupling += 1
            sep = ":"

        right = sep = ""
        for righty in rights:
            right += sep + righty
            sep = ":" 

        if lresume == False:
            lag = str(0)
            seq = str(2)
            export_mode = "EXPOUT"
        else:
            lag = direction.get("lag", 0)
            seq = direction.get("seq", 2)
            export_mode = "EXPORTED"

        self.namcouple += [right + " " + left + " " + str(nb) + " " + str(time_step) + " " + seq + " " + restart_file+ " " + export_mode]
        if lgrid and rgrid:
            self.namcouple += [str(rgrid["nx"]) + " " + str(rgrid["ny"]) + " " + str(lgrid["nx"]) + " " + str(lgrid["ny"]) + " " + rgrid["name"] + " " + lgrid["name"] + " LAG=" + str(lag)]
        
        self.namcouple += ["P  0  P  0"]

        if transformation["name"] == "distwgt":
            bins = transformation.get("bins", 15)
            other_number = transformation.get("other_number", 6)

            self.namcouple += ["LOCTRANS SCRIPR"]
            self.namcouple += ["INSTANT"]
            self.namcouple += ["DISTWGT U SCALAR LATITUDE " + str(bins) + " " + str(other_number)]

        elif transformation["name"] == "bicubic":
            bins = transformation.get("bins", 15)
            self.namcouple += ["LOCTRANS SCRIPR"]
            self.namcouple += ["INSTANT"]
            self.namcouple += ["BICUBIC D SCALAR LATITUDE " + str(bins)]

        self.namcouple += ["#"]
        self.namcouple += ["#"]
        self.namcouple += ["#"]
        self.namcouple += ["###############################################################################"]

        

    def add_output_file(self, lefts, rights, leftmodel, rightmodel, config):
        out_file = []

        coupling = self.next_coupling

        if self.next_coupling < 10:
            this_coupling = "0" + str(coupling)
        else:
            this_coupling = str(coupling)

        for lefty in lefts:
            out_file.append(lefty + "_" + leftmodel + "_" + this_coupling + ".nc")
        for righty in rights:
            out_file.append(righty + "_" + rightmodel + "_" + this_coupling + ".nc") 
    
        self.next_coupling += 1

        for thisfile in out_file:
            if not "outdata_files" in config:
                config["outdata_files"] = {}
            if not "outdata_in_workdir" in config:
                config["outdata_in_workdir"] = {}
            if not "outdata_sources" in config:
                config["outdata_sources"] = {}

            config["outdata_files"][thisfile] = thisfile
            config["outdata_in_workdir"][thisfile] = thisfile
            config["outdata_sources"][thisfile] = config["thisrun_outdata_dir"] + "/" + thisfile




    def finalize(self, destination_dir):
        self.namcouple += [" $END"]
        endline=""
        with open(destination_dir+"/namcouple", "w") as namcouple:
            for line in self.namcouple:
                namcouple.write(endline)
                namcouple.write(line)
                endline="\n"



	
