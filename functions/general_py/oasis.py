class oasis:
    def __init__(
        self,
        nb_of_couplings=1,
        coupled_execs=["echam", "fesom"],
        runtime=1,
        debug_level=1,
    ):
        self.namcouple = [
            "# This namcouple was automatically generated by the easy-tools (Python)"
        ]
        self.namcouple += [" $NFIELDS", "        " + str(nb_of_couplings), "$END"]
        exec_entry = ""
        for exe in coupled_execs:
            exec_entry = exec_entry + " " + exe
        exec_entry = str(len(coupled_execs)) + exec_entry
        self.namcouple += [" $NBMODEL", "        " + str(exec_entry), "$END"]
        self.namcouple += [" $RUNTIME", "        " + str(runtime), "$END"]
        self.namcouple += [" $LOGPRT", "        " + str(debug_level), "$END"]
        self.namcouple += [" $STRINGS"]
        self.namcouple += [
            "###############################################################################"
        ]
        self.namcouple += [
            "###############################################################################"
        ]

    def add_coupling(
        self,
        lefts,
        lgrid,
        rights,
        rgrid,
        direction,
        transformation,
        restart_file,
        time_step,
        lresume,
    ):
        self.namcouple += ["#"]

        left = sep = ""
        for lefty in lefts:
            left += sep + lefty
            sep = ":"

        right = sep = ""
        for righty in rights:
            right += sep + righty
            sep = ":"

        if lresume == False:
            lag = str(0)
            seq = str(1)
            export_mode = "EXPOUT"
        else:
            lag = direction.get("lag", 0)
            seq = direction.get("seq", 2)
            export_mode = "EXPORTED"

        self.namcouple += [
            right
            + " "
            + left
            + " 1 "
            + time_step
            + " "
            + seq
            + " "
            + restart_file
            + " "
            + export_mode
        ]
        if lgrid and rgrid:
            self.namcouple += [
                rgrid["nx"]
                + " "
                + rgrid["ny"]
                + " "
                + lgrid["nx"]
                + " "
                + lgrid["ny"]
                + " "
                + rgrid["name"]
                + " "
                + lgrid["name"]
                + " LAG="
                + lag
            ]

        self.namcouple += ["P  0  P  0"]

        if transformation["name"] == "distwgt":
            bins = transformation.get("bins", 15)
            other_number = transformation.get("other_number", 6)

            self.namcouple += ["LOCTRANS SCRIPR"]
            self.namcouple += ["INSTANT"]
            self.namcouple += ["DISTWGT U SCALAR LATITUDE " + bins + " " + other_number]

        elif transformation["name"] == "bicubic":
            bins = transformation.get("bins", 15)
            self.namcouple += ["LOCTRANS SCRIPR"]
            self.namcouple += ["INSTANT"]
            self.namcouple += ["BICUBIC D SCALAR LATITUDE " + bins]

        self.namcouple += ["#"]
        self.namcouple += ["#"]
        self.namcouple += ["#"]
        self.namcouple += [
            "###############################################################################"
        ]

    def finalize(self, destination_dir):
        self.namcouple += [" $END"]
        endline = ""
        with open(destination_dir + "/namcouple", "w") as namcouple:
            for line in self.namcouple:
                namcouple.write(endline)
                namcouple.write(line)
                endline = "\n"
