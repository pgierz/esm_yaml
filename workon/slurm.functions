#!/usr/bin/ksh


slurm_set_defaults()
{
	sbatch () {
    		unset SLURM_MEM_PER_CPU
    		command sbatch "$@"
	}


	submit_flags='\$\{exclusive_${next_script}\} ${account_flag} --partition=\$\{${next_script}_partition\} --time=\$\{${next_script}_time\} \$\{mem_flag_${next_script}\} --output=${EXP_ID}_${next_script}_%j.log --error=${EXP_ID}_${next_script}_%j.log ${notification_flag} --ntasks=\$\{tasks_${next_script}\} ${hyper_flag} --job-name=${EXP_ID}'
si
	launcher_flags="-l --kill-on-bad-exit=1 --cpu_bind=cores"
        #if [[ "x${machine_name}" = "xglogin" ]]; then
        #        launcher_flags="--mpi=pmi2 ${launcher_flags}"
        #fi 
	if [[ "x${launcher}" = "xmpiexec_hydra" ]]
	then
		launcher_flags=" -bootstrap slurm"
		if [[ "x$check" = "x1" ]] 
		then
			hostname_list="DUMMY_HOST1 DUMMY_HOST2"
		else
			hostname_list=$(scontrol show hostnames)
		fi
	elif [[ "x${launcher}" = "xsrun" ]]
	then
		if [[ "x${machine_name}" != "xjuwels" ]]; then
			launcher_flags="-l --kill-on-bad-exit=1 --cpu_bind=cores"
		else
			launcher_flags="-l" # --distribution=cyclic:cyclic"
		fi
        elif [[ "x${launcher}" = "xmpirun" ]]
	then 
	        launcher_flags="-l" # --kill-on-bad-exit=1 --cpu_bind=cores --distribution=cyclic:cyclic" 
	else
		echo "Unknown launcher, please specify mpiexec_hydra (yes, with a \"_\"!), mpirun, or srun."
		exit 42
	fi

	this_total_nnodes=${SLURM_NNODES:-ERR}

	JOB_ID=${SLURM_JOBID:-$$}
	if [[ "x${this_total_nnodes}" = "xERR" ]]
	then
		SUBMITTED=0
		SCRIPT_NAME=`basename "$0" | cut -f1 -d' '`
		ACTUAL_SCRIPT_DIR=$( cd -P -- "$(dirname -- "$(command -v -- "$0")")" && pwd -P )
		echo "		Running on frontend!"
	else
		SUBMITTED=1
		SCRIPT_NAME=`squeue --job ${JOB_ID} -o "%o" | cut -f1 -d' '`
		SCRIPT_NAME=`basename "${SCRIPT_NAME}" | cut -f1 -d' '`
		ACTUAL_SCRIPT_DIR=`squeue --job ${JOB_ID} --format "%Z"`
		ACTUAL_SCRIPT_DIR=`echo ${ACTUAL_SCRIPT_DIR} | cut -f2 -d ' '`
		if [[ "x${machine_name}" = "xollie" ]] && [[ "x$NOT_USE_ESM_ENVIRONMENT" != "x1" ]]; then
			module load centoslibs
		fi
		eval TOTAL_NNODES_${script_type}=$this_total_nnodes
		echo "		Running on $this_total_nnodes nodes"
	fi
}



srun_prepare_execution()
{
	my_srun_hosts=hostfile_srun
	mecho "my_srun_hosts=${my_srun_hosts}"

	[[ -e $my_srun_hosts ]] && ${rm} -f $my_srun_hosts

#	new_start=0
	echo "		Binding of executables to threads: (hostfile_srun)"
	for model in ${coupled_setup_executable_list}
	do	
		eval new_start=\${offset_${model}}
		mecho "Processing model ${model}"	
		eval nb_of_cores=\${tasks_${model}}
		mecho "tasks_model ${nb_of_cores}"
		new_end=$(( new_start + nb_of_cores - 1))
		mecho "new_end ${new_end}"
		mecho "new_start ${new_start}"
		eval this_exe=\${COMMAND_${model}:-ERR}
		echo "${new_start}-${new_end}  ./${this_exe}" >> $my_srun_hosts
		echo "			${new_start}-${new_end}  ./${this_exe}"
#		new_start=$((new_end + 1)) 
	done
	if [[ "x${verbose}" = "x1" ]]
	then
		cat $my_srun_hosts >> $dumpfile
	fi

	final_execution_command="$launcher $launcher_flags --multi-prog $my_srun_hosts " 
}

mpirun_prepare_execution()
{
        my_mpirun_hosts=hostfile_mpirun
        execution_command_file="execution_command"
        mecho "my_mpirun_hosts=${my_mpirun_hosts}"

        [[ -e $my_mpirun_hosts ]] && ${rm} -f $my_mpirun_hosts

        echo "          Binding of executables to threads: (hostfile_mpirun)"
        my_mpirun_np=""
        for model in ${coupled_setup_executable_list}
        do
                eval new_start=\${offset_${model}}
                mecho "Processing model ${model}"
                eval nb_of_cores=\${tasks_${model}}
                mecho "tasks_model ${nb_of_cores}"
                new_end=$(( new_start + nb_of_cores - 1))
                mecho "new_end ${new_end}"
                mecho "new_start ${new_start}"
                eval this_cmd=\${COMMAND_${model}:-ERR}
                echo "this_cmd " $this_cmd
                #this_exe_full=$(readlink -f ${this_exe})
                #echo "this_exe_full " $this_exe_full
                echo "-np ${nb_of_cores}  ${this_cmd}" >> $my_mpirun_hosts
                echo "                  ${new_start}-${new_end}  ./${this_cmd}"
                if [[ "x${my_mpirun_np}" = "x" ]]
                then 
                    my_mpirun_np="-n ${nb_of_cores} ./${this_cmd}"
                else
                    my_mpirun_np="${my_mpirun_np} : -n ${nb_of_cores} ./${this_cmd}"
                fi
        done
        if [[ "x${verbose}" = "x1" ]]
        then
                cat $my_mpirun_hosts >> $dumpfile
        fi

        final_execution_command="$launcher $launcher_flags ${my_mpirun_np} "
        echo "${final_execution_command}" >> $execution_command_file
}
