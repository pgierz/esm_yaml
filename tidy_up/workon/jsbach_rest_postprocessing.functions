

jsbach_post_process()
{
	cd $POST_DIR
	mecho 'jsbach post-processing started'

	if files=$(double_loop ${EXP_ID}_jsbach_SUBSTREAM1_SUBSTREAM2.grb); then
		while read -r file stream ym; do
			for meantag in $MEANTAGS_jsbach; do	
        			while (( $(jobs -p | wc -l) >=  max_jobs )); do sleep $sleep_time; done
				call_if_exists jsbach_post_process_${meantag}
			done
		done <<< $files
	fi
	if files=$(double_loop ${EXP_ID}_jsbach_SUBSTREAM1_SUBSTREAM2.nc); then
		while read -r file stream ym; do
			for meantag in $MEANTAGS_jsbach; do	
        			while (( $(jobs -p | wc -l) >=  max_jobs )); do sleep $sleep_time; done
				call_if_exists jsbach_post_process_${meantag}
			done
		done <<< $files
	fi

	CONCATENATE_POST_PROCESS_jsbach=${CONCATENATE_POST_PROCESS_jsbach:-0}

	if [[ "x${CONCATENATE_POST_PROCESS_jsbach}" = "x1" ]]; then

		mecho 'JSBACH concatenation started'
		for meantag in $MEANTAGS_jsbach; do
			case $meantag in 
				BOT | ATM | LOG | co2 | QBO | tracer )
					if files=$(ls ${EXP_ID}_jsbach_${meantag}_mm_*.nc); then
        					output=${EXP_ID}_jsbach_${meantag}_${startdate}-${enddate}.nc
            					time_merge $output $files
						add_to ${POST_DIR}/$output $output output
					fi
					;;
				mm | dm | ym )
					if files=$(double_loop ${meantag}_jsbach_SUBSTREAM1_SUBSTREAM2.nc); then
					newstream=0
					thesefiles="NONE"
					while read -r file stream ym; do
						if ! [[ "x$stream" = "x$laststream" ]]; then
							if ! [[ "x${thesefiles}" = "xNONE" ]]; then
								output=${meantag}_jsbach_${laststream}_${startdate}-${enddate}.nc
								time_merge $output $thesefiles
								add_to ${POST_DIR}/$output $output output
							fi
							thesefiles=$file
						else
							thesefiles="$thesefiles $file"
						fi
						laststream=$stream
					done <<< $files
					fi
					;;
			esac
		done
	fi

	TAR_RAW_OUTPUT_jsbach=${TAR_RAW_OUTPUT_jsbach:-0}
	TAR_FREQ=${TAR_FREQ:-1}

	mod=$(( RUN_NUMBER_jsbach % TAR_FREQ ))
	if [[ "$mod" = "0" ]]; then
		TAR_RAW_OUTPUT_jsbach=${TAR_RAW_OUTPUT_jsbach:-1}
	else
		TAR_RAW_OUTPUT_jsbach=${TAR_RAW_OUTPUT_jsbach:-0}
	fi

	if [[ "x${TAR_RAW_OUTPUT_jsbach}" = "x1" ]]; then
		cd ${RESTART_DIR_jsbach}
		if ! [[ -e ${EXP_ID}_jsbach_raw_restarts_${END_DATE_jsbach}.tar.gz ]]; then
			# --use-compress-program=pigz -cvf 
			tar --create $tar_compress_program ${TAR_DIR}/${EXP_ID}_jsbach_raw_restarts_${END_DATE_jsbach}.tar.gz restart_${EXP_ID}_*_${END_DATE_jsbach}.nc
		else
			tar --append $tar_compress_program ${TAR_DIR}/${EXP_ID}_jsbach_raw_restarts_${END_DATE_jsbach}.tar.gz restart_${EXP_ID}_*_${END_DATE_jsbach}.nc
		fi
		cd ${DATA_DIR_jsbach}
		if ! [[ -e ${EXP_ID}_jsbach_raw_output_${END_DATE_jsbach}.tar.gz ]]; then
			# --use-compress-program=pigz -cvf 
			tar --create $tar_compress_program ${TAR_DIR}/${EXP_ID}_jsbach_raw_output_${END_DATE_jsbach}.tar.gz ${EXP_ID}_jsbach_*_${END_DATE_jsbach}.nc
		else
			tar --append $tar_compress_program ${TAR_DIR}/${EXP_ID}_jsbach_raw_output_${END_DATE_echam}.tar.gz ${EXP_ID}_jsbach_*_${END_DATE_jsbach}.nc
		fi
	fi

	ARCHIVE_TAR_OUTPUT_jsbach=${ARCHIVE_TAR_OUTPUT_jsbach:-0}

	if [[ "x${ARCHIVE_TAR_OUTPUT_jsbach}" = "x1" ]]; then
		if [[ "x${TAR_RAW_OUTPUT_jsbach}" = "x1" ]]; then
			call_if_exists $archive_tars "${TAR_DIR}/\*.tar.gz"
		fi
	fi
	cd $SCRIPT_DIR
}


